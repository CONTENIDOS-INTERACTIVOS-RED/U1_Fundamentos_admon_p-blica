{"remainingRequest":"/home/runner/work/U1_Fundamentos_admon_publica/U1_Fundamentos_admon_publica/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Fundamentos_admon_publica/U1_Fundamentos_admon_publica/src/views/curso/Tema2.vue?vue&type=template&id=82bc7242&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Fundamentos_admon_publica/U1_Fundamentos_admon_publica/src/views/curso/Tema2.vue","mtime":1741575220303},{"path":"/home/runner/work/U1_Fundamentos_admon_publica/U1_Fundamentos_admon_publica/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Fundamentos_admon_publica/U1_Fundamentos_admon_publica/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Fundamentos_admon_publica/U1_Fundamentos_admon_publica/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Fundamentos_admon_publica/U1_Fundamentos_admon_publica/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Fundamentos_admon_publica/U1_Fundamentos_admon_publica/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}